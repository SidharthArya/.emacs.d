* Helm Find Files

** Tips

*** Navigation summary

For a better experience you can enable auto completion by setting
‘helm-ff-auto-update-initial-value’ to non-nil in your init file.  It is not
enabled by default to not confuse new users.

**** Navigate with arrow keys

You can use <right> and <left> arrows to go down or up one level, to disable
this customize ‘helm-ff-lynx-style-map’.
Note that using ‘setq’ will NOT work.

**** Use ‘C-j’ (persistent action) on a directory to go down one level

On a symlinked directory a prefix argument expands to its true name.

**** Use ‘C-l’ or ‘DEL’ on a directory to go up one level

***** ‘DEL’ behavior

‘DEL’ by default deletes char backward.

But when ‘helm-ff-DEL-up-one-level-maybe’ is non nil ‘DEL’ behaves
differently depending on the contents of helm-pattern.  It goes up one
level if the pattern is a directory ending with "/" or disables HFF
auto update and delete char backward if the pattern is a filename or
refers to a non existing path.  Going up one level can be disabled
if necessary by deleting "/" at the end of the pattern using
C-b and C-k.

Note that when deleting char backward, Helm takes care of
disabling update giving you the opportunity to edit your pattern for
e.g. renaming a file or creating a new file or directory.
When ‘helm-ff-auto-update-initial-value’ is non nil you may want to
disable it temporarily, see [[Toggle auto-completion][Toggle auto-completion]] for this.

**** Use ‘C-r’ to walk back the resulting tree of all the ‘C-l’ or DEL you did

The tree is reinitialized each time you browse a new tree with
‘C-j’ or by entering some pattern in the prompt.

**** ‘RET’ behavior

It behaves differently depending on ‘helm-selection’ (current candidate in helm-buffer):

- candidate basename is "." => Open it in dired.
- candidate is a directory    => Expand it.
- candidate is a file         => Open it.

If you have marked candidates and you press RET on a directory,
Helm will navigate to this directory.  If you want to exit with
RET with default action with these marked candidates, press RET a
second time while you are on the root of this directory e.g.
"/home/you/dir/." or press RET on any file which is not a
directory.  You can also exit with default action at any moment
with ‘f1’.

Note that when copying, renaming, etc. from ‘helm-find-files’ the
destination file is selected with ‘helm-read-file-name’.

**** ‘TAB’ behavior

Normally ‘TAB’ is bound to ‘helm-select-action’ in helm-map which
display the action menu.

You can change this behavior by setting in ‘helm-find-files-map’
a new command for ‘TAB’:

    (define-key helm-find-files-map (kbd "C-i") ’helm-ff-TAB)

It will then behave slighly differently depending of
‘helm-selection’:

- candidate basename is "."  => open the action menu.
- candidate is a directory     => expand it (behave as C-j).
- candidate is a file          => open action menu.

Called with a prefix arg open menu unconditionally.

*** Filter out files or directories

You can show files or directories only with respectively
<S-f4> and <S-f5>.
These are toggle commands i.e. filter/show_all.
Changing directory disable filtering.

*** Sort directory contents

When listing a directory without narrowing its contents, i.e. when pattern ends with "/",
you can sort alphabetically, by newest or by size by using respectively
<S-f1>, <S-f2> or <S-f3>.
NOTE:
When starting back narrowing i.e. entering something in minibuffer after "/" sorting is done
again with fuzzy sorting and no more with sorting methods previously selected.

*** Find file at point

Helm uses ‘ffap’ partially or completely to find file at point depending on the
value of ‘helm-ff-guess-ffap-filenames’: if non-nil, support is complete
(annoying), if nil, support is partial.

Note that when the variable
‘helm-ff-allow-non-existing-file-at-point’ is non nil Helm will
insert the filename at point even if file with this name doesn’t
exists.  If non existing file at point ends with numbers prefixed
with ":" the ":" and numbers are stripped.

**** Find file at line number

When text at point is in the form of

    ~/elisp/helm/helm.el:1234

Helm finds this file at the indicated line number, here 1234.

**** Find URL at point

When a URL is found at point, Helm expands to that URL only.
Pressing ‘RET’ opens that URL using ‘browse-url-browser-function’.

**** Find e-mail address at point

When an e-mail address is found at point, Helm expands to this e-mail address
prefixed with "mailto:".  Pressing ‘RET’ opens a message buffer with that
e-mail address.

*** Quick pattern expansion

**** Enter ‘~/’ at end of pattern to quickly reach home directory

**** Enter ‘/’ at end of pattern to quickly reach the file system root

**** Enter ‘./’ at end of pattern to quickly reach ‘default-directory’

(As per its value at the beginning of the session.)

If you already are in the ‘default-directory’ this will move the cursor to the top.

**** Enter ‘../’ at end of pattern will reach upper directory, moving cursor to the top

This is different from using ‘C-l’ in that it moves
the cursor to the top instead of remaining on the previous subdir name.

**** Enter ‘..name/’ at end of pattern to start a recursive search

It searches directories matching "name" under the current directory, see the
"Recursive completion on subdirectories" section below for more details.

**** Any environment variable (e.g. ‘$HOME’) at end of pattern gets expanded

**** Any valid filename yanked after pattern gets expanded

**** Special case: URL at point

The quick expansions do not take effect after end a URL, you must kill the
pattern first (‘C-k’).

*** Helm-find-files supports fuzzy matching

It starts from the third character of the pattern.

For instance "fob" or "fbr" will complete "foobar" but "fb" needs a
third character in order to complete it.

*** ‘C-j’ on a filename expands to that filename in the Helm buffer

Second hit displays the buffer filename.
Third hit kills the buffer filename.
Note: ‘C-u C-j’ displays the buffer directly.

*** Browse images directories with ‘helm-follow-mode’ and navigate up/down

Before Emacs-27 Helm was using image-dired that works with
external ImageMagick tools.  From Emacs-27 Helm use native
display of images with image-mode by default for Emacs-27 (see ‘helm-ff-display-image-native’),
this allows automatic resize when changing window size, zooming with ‘M-+’ and ‘M--’
and rotate images as before.

You can also use ‘helm-follow-action-forward’ and ‘helm-follow-action-backward’ with
‘<C-down>’ and ‘<C-up>’ respectively.
Note that these commands have different behavior when ‘helm-follow-mode’
is enabled (go to next/previous line only).

Use ‘C-u C-j’ to display an image or kill its buffer.

TIP: Use ‘C-t’ and ‘C-{’ to display Helm window vertically
and to enlarge it while viewing images.
Note this may not work with exotic Helm windows settings such as the ones in Spacemacs.

*** Open files externally

- Open file with external program (‘C-c C-x’,‘C-u’ to choose).

Helm is looking what is used by default to open file
externally (mailcap files) but have its own variable
‘helm-external-programs-associations’ to store external
applications.  If you call the action or its binding without
prefix arg Helm will see if there is an application suitable in
‘helm-external-programs-associations’, otherwise it will look in
mailcap files.  If you want to specify which external application
to use (and its options) use a prefix arg.

Note: What you configure for Helm in ‘helm-external-programs-associations’
will take precedence on mailcap files.

- Preview file with external program (‘C-c C-v’).

Same as above but doesn’t quit Helm session, it is apersistent action.

- Open file externally with default tool (‘C-c X’).

This uses xdg-open which sucks most of the time, but perhaps it
works fine on Windows.  This is why it is kept in Helm.

*** Toggle auto-completion

It is useful when trying to create a new file or directory and you don’t want
Helm to complete what you are writing.

Note: On a terminal, the default binding ‘C-<backspace>’ may not work.
In this case use ‘C-c <backspace>’.

*** You can create a new directory and a new file at the same time

Simply write the path in the prompt and press ‘RET’, e.g.
"~/new/newnew/newnewnew/my_newfile.txt".

*** To create a new directory, append a "/" to the new name and press ‘RET’

*** To create a new file, enter a filename not ending with "/"

Note that when you enter a new name, this one is prefixed with
[?] if you are in a writable directory.  If you are in a directory
where you have no write permission the new file name is not
prefixed and is colored in red.  There is not such distinction
when using Tramp, new filename just appears on top of buffer.

*** Recursive search from Helm-find-files

**** You can use Helm-browse-project (see binding below)

- With no prefix argument:
If the current directory is under version control with either git or hg and
helm-ls-git and/or helm-ls-hg are installed, it lists all the files under
version control.  Otherwise it falls back to Helm-find-files.  See
https://github.com/emacs-helm/helm-ls-git and
https://github.com/emacs-helm/helm-ls-hg.

- With one prefix argument:
List all the files under this directory and other subdirectories
(recursion) and this list of files will be cached.

- With two prefix arguments:
Same but the cache is refreshed.

**** You can start a recursive search with "locate", "find" or [[https://github.com/sharkdp/fd][Fd]]

See "Note" in the [[Recursive completion on subdirectories][section on subdirectories]].

Using "locate", you can enable the local database with a prefix argument. If the
local database doesn’t already exists, you will be prompted for its creation.
If it exists and you want to refresh it, give it two prefix args.

When using locate the Helm buffer remains empty until you type something.
Regardless Helm uses the basename of the pattern entered in the helm-find-files
session by default.  Hitting ‘M-n’ should just kick in the
locate search with this pattern.  If you want Helm to automatically do this, add
‘helm-source-locate’ to ‘helm-sources-using-default-as-input’.

NOTE: On Windows use Everything with its command line ~es~ as a replacement of locate.
See [[https://github.com/emacs-helm/helm/wiki/Locate#windows][Locate on Windows]]

**** Recursive completion on subdirectories

Starting from the directory you are currently browsing, it is possible to have
completion of all directories underneath.  Say you are at "/home/you/foo/" and
you want to go to "/home/you/foo/bar/baz/somewhere/else", simply type
"/home/you/foo/..else" and hit ‘C-j’ or enter
the final "/".  Helm will then list all possible directories under "foo"
matching "else".

Note: Completion on subdirectories uses "locate" as backend, you can configure
the command with ‘helm-locate-recursive-dirs-command’.  Because this completion
uses an index, the directory tree displayed may be out-of-date and not reflect
the latest change until you update the index (using "updatedb" for "locate").

If for some reason you cannot use an index, the "find" command from
"findutils" can be used instead.  It will be slower though.  You need to pass
the basedir as first argument of "find" and the subdir as the value for
’-(i)regex’ or ’-(i)name’ with the two format specs that are mandatory in
‘helm-locate-recursive-dirs-command’.

Examples:
- "find %s -type d -name ’*%s*’"
- "find %s -type d -regex .*%s.*$"

[[https://github.com/sharkdp/fd][Fd]] command is now also
supported which is regexp based and very fast.  Here is the command
line to use:

- "fd --hidden --type d .*%s.*$ %s"

You can use also a glob based search, in this case use the --glob option:

- "fd --hidden --type d --glob ’*%s*’ %s"

*** Insert filename at point or complete filename at point

On insertion (not on completion, i.e. there is nothing at point):

- ‘C-c i’: insert absolute file name.
- ‘C-u C-c i’: insert abbreviated file name.
- ‘C-u C-u C-c i’: insert relative file name.
- ‘C-u C-u C-u C-c i’: insert basename.

On completion:

- Target starts with "~/": insert abbreviate file name.
- target starts with "/" or "[a-z]:/": insert full path.
- Otherwise: insert relative file name.

*** Use the wildcard to select multiple files

Use of wildcard is supported to run an action over a set of files.

Example: You can copy all the files with ".el" extension by using "*.el" and
then run copy action.

Similarly, "**.el" (note the two stars) will recursively select all ".el"
files under the current directory.

Note that when recursively copying files, you may have files with same name
dispatched across different subdirectories, so when copying them in the same
directory they will get overwritten.  To avoid this Helm has a special action
called "backup files" that has the same behavior as the command line "cp -f
--backup=numbered": it allows you to copy many files with the same name from
different subdirectories into one directory.  Files with same name are renamed
as follows: "foo.txt.~1~".  Like with the --force option of cp, it is possible
to backup files in current directory.

This command is available only when ‘dired-async-mode’ is active.

When using an action that involves an external backend (e.g. grep), using "**"
is not recommended (even thought it works fine) because it will be slower to
select all the files.  You are better off leaving the backend to do it, it will
be faster.  However, if you know you have not many files it is reasonable to use
this, also using not recursive wildcard (e.g. "*.el") is perfectly fine for
this.

The "**" feature is active by default in the option ‘helm-file-globstar’.  It
is different from the Bash "shopt globstar" feature in that to list files with
a named extension recursively you would write "**.el" whereas in Bash it would
be "**/*.el".  Directory selection with "**/" like Bash "shopt globstar"
option is not supported yet.

Helm supports different styles of wildcards:

- ‘sh’ style, the ones supported by ‘file-expand-wildcards’.
e.g. "*.el", "*.[ch]" which match respectively all ".el"
files or all ".c" and ".h" files.

- ‘bash’ style (partially) In addition to what allowed in ‘sh’
style you can specify file extensions that have more than one
character like this: "*.{sh,py}" which match ".sh" and
".py" files.

Of course in both styles you can specify one or two "*".

*** Query replace regexp on filenames

Replace different parts of a file basename with something else.

When calling this action you will be prompted twice as with
‘query-replace’, first for the matching expression of the text to
replace and second for the replacement text.  Several facilities,
however, are provided to make the two prompts more powerfull.

**** Syntax of the first prompt

In addition to simple regexps, these shortcuts are available:

- Basename without extension => "%."
- Only extension             => ".%"
- Substring                  => "%:<from>:<to>"
- Whole basename             => "%"

**** Syntax of the second prompt

In addition to a simple string to use as replacement, here is what you can use:

- A placeholder refering to what you have selected in the first prompt: "\@".

After this placeholder you can use a search-and-replace syntax à-la sed:

    "\@/<regexp>/<replacement>/

You can select a substring from the string represented by the placeholder:

    "\@:<from>:<to>"

- A special character representing a number which is incremented: "\#".

- Shortcuts for ‘upcase’, ‘downcase’ and ‘capitalize’
are available as‘%u’, ‘%d’ and ‘%c’ respectively.

**** Examples

***** Recursively rename all files with ".JPG" extension to ".jpg"

Use the ‘helm-file-globstar’ feature described in [[Use the wildcard to select multiple files][recursive globbing]]
by entering "**.JPG" at the end of the Helm-find-files pattern, then hit
M-@ and enter "JPG" on first prompt, then "jpg" on second prompt and hit ‘RET’.

Alternatively you can enter ".%" at the first prompt, then "jpg" and hit
‘RET’.  Note that when using this instead of using "JPG" at the first prompt,
all extensions will be renamed to "jpg" even if the extension of one of the
files is, say, "png".  If you want to keep the original extension you can use
"%d" at the second prompt (downcase).

***** Batch-rename files from number 001 to 00x

Use "\#" inside the second prompt.

Example 1: To rename the files

    foo.jpg
    bar.jpg
    baz.jpg

to

    foo-001.jpg
    foo-002.jpg
    foo-003.jpg

use "%." as matching regexp and "foo-\#" as replacement string.

Example 2: To rename the files

    foo.jpg
    bar.jpg
    baz.jpg

to

    foo-001.jpg
    bar-002.jpg
    baz-003.jpg

use as matching regexp "%." and as replacement string "\@-\#".

***** Replace a substring

Use "%:<from>:<to>".

Example: To rename files

    foo.jpg
    bar.jpg
    baz.jpg

to

    fOo.jpg
    bAr.jpg
    bAz.jpg

use as matching regexp "%:1:2" and as replacement string "%u" (upcase).

Note that you *cannot* use "%." and ".%" along with substring replacement.

***** Modify the string from the placeholder (\@)

- By substring, i.e. only using the substring of the placeholder: "\@:<from>:<to>".
The length of placeholder is used for <to> when unspecified.

Example 1: "\@:0:2" replaces from the beginning to the second char of the placeholder.

Example 2: \@:2: replaces from the second char of the placeholder to the end.

- By search-and-replace: "\@/<regexp>/<replacement>/".

Incremental replacement is also handled in <replacement>.

Example 3: "\@/foo/bar/" replaces "foo" by "bar" in the placeholder.

Example 4: "\@/foo/-\#/" replaces "foo" in the placeholder by 001, 002, etc.

***** Clash in replacements (avoid overwriting files)

When performing any of these replacement operations you may end up with same
names as replacement.  In such cases Helm numbers the file that would otherwise
overwritten.  For instance, should you remove the "-m<n>" part from the files
"emacs-m1.txt", "emacs-m2.txt" and "emacs-m3.txt" you would end up with
three files named "emacs.txt", the second renaming overwriting first file, and
the third renaming overwriting second file and so on.  Instead Helm will
automatically rename the second and third files as "emacs(1).txt" and
"emacs(2).txt" respectively.

***** Query-replace on filenames vs. serial-rename action

Unlike the [[Serial renaming][serial rename]] actions, the files renamed with
the query-replace action stay in their initial directory and are not moved to
the current directory.  As such, using "\#" to serial-rename files only makes
sense for files inside the same directory.  It even keeps renaming files
with an incremental number in the next directories.

*** Serial renaming

You can use the serial-rename actions to rename, copy or symlink marked files to
a specific directory or in the current directory with all the files numbered
incrementally.

- Serial-rename by renaming:
Rename all marked files with incremental numbering to a specific directory.

- Serial-rename by copying:
Copy all marked files with incremental numbering to a specific directory.

- Serial-rename by symlinking:
Symlink all marked files with incremental numbering to a specific directory.

*** Edit marked files in a dired buffer

You can open a dired buffer containing only marked files with ‘C-x C-q’.
With a prefix argument you can open this same dired buffer in wdired mode for
editing.  Note that wildcards are supported as well, so you can use e.g.
"*.txt" to select all ".txt" files in the current directory or "**.txt" to
select all files recursively from the current directory.
See [[Use the wildcard to select multiple files]] section above.

*** Defining default target directory for copying, renaming, etc

You can customize ‘helm-dwim-target’ to behave differently depending on the
windows open in the current frame.  Default is to provide completion on all
directories associated to each window.

*** Copying/Renaming from or to remote directories

Never use ssh tramp method to copy/rename large files, use
instead its scp method if you want to avoid out of memory
problems and crash Emacs or the whole system.  Moreover when using
scp method, you will hit a bug when copying more than 3 files at
the time, see [[https://github.com/emacs-helm/helm/issues/1945][bug#1945]].
The best way actually is using Rsync to copy files from or to
remote, see [[Use Rsync to copy files][Use Rsync to copy files]].
Also if you often work on remote you may consider using SSHFS
instead of relying on tramp.

*** Copying and renaming asynchronously

If you have the async library installed (if you got Helm from MELPA you do), you
can use it for copying/renaming files by enabling ‘dired-async-mode’.

Note that even when async is enabled, running a copy/rename action with a prefix
argument will execute action synchronously. Moreover it will follow the first
file of the marked files in its destination directory.

When ‘dired-async-mode’ is enabled, an additional action named "Backup files"
will be available. (Such command is not natively available in Emacs).
See [[Use the wildcard to select multiple files]] for details.

*** Use Rsync to copy files

If Rsync is available, you can use it to copy/sync files or directories
with some restrictions though:

- Copying from/to tramp sudo method may not work (permissions).
- Copying from remote to remote is not supported (rsync restriction)
however you can mount a remote with sshfs and copy to it (best), otherwise you have to modify
the command line with a prefix arg, see [[https://unix.stackexchange.com/questions/183504/how-to-rsync-files-between-two-remotes][how-to-rsync-files-between-two-remotes]]
for the command line to use.

This command is mostly useful when copying large files as it is
fast, asynchronous and provide a progress bar in mode-line.  Each
rsync process have its own progress bar, so you can run several
rsync jobs, they are independents.  If rsync fails you can
consult the "*helm-rsync<n>*" buffer to see rsync errors.  An
help-echo (move mouse over progress bar) is provided to see which
file is in transfer.  Note that when copying directories, no
trailing slashes are added to directory names, which mean that
directory is created on destination if it doesn’t already exists,
see rsync documentation for more infos on rsync behavior.  To
synchronize a directory, mark all in the directory and rsync all
marked to the destination directory or rsync the directory itself
to its parent, e.g. remote:/home/you/music => /home/you.

The options are configurable through ‘helm-rsync-switches’, but
you can modify them on the fly when needed by using a prefix arg,
in this case you will be prompted for modifications.

NOTE: When selecting a remote file, if you use the tramp syntax
for specifying a port, i.e. host#2222, helm will add
automatically "-e ’ssh -p 2222’" to the rsync command line
unless you have specified yourself the "-e" option by editing
rsync command line with a prefix arg (see above).

*** Bookmark the ‘helm-find-files’ session

You can bookmark the ‘helm-find-files’ session with ‘C-x r m’.
You can later retrieve these bookmarks by calling ‘helm-filtered-bookmarks’
or, from the current ‘helm-find-files’ session, by hitting ‘C-x r b’.

*** Grep files from ‘helm-find-files’

You can grep individual files from ‘helm-find-files’ by using
‘C-s’.  This same command can also
recursively grep files from the current directory when called with a prefix
argument.  In this case you will be prompted for the file extensions to use
(grep backend) or the types of files to use (ack-grep backend).  See the
‘helm-grep-default-command’ documentation to set this up.  For compressed files
or archives, use zgrep with ‘M-g z’.

Otherwise you can use recursive commands like ‘M-g a’ or ‘M-g g’
that are much faster than using ‘C-s’ with a prefix argument.
See ‘helm-grep-ag-command’ and ‘helm-grep-git-grep-command’ to set this up.

You can also use "id-utils"’ GID with ‘M-g i’
by creating an ID index file with the "mkid" shell command.

All those grep commands use the symbol at point as the default pattern.
Note that default is different from input (nothing is added to the prompt until
you hit ‘M-n’).

**** Grepping on remote files

On remote files grep is not well supported by TRAMP unless you suspend updates before
entering the pattern and re-enable it once your pattern is ready.
To toggle suspend-update, use ‘C-!’.

*** Execute Eshell commands on files

Setting up aliases in Eshell allows you to set up powerful customized commands.

Your aliases for using eshell command on file should allow
specifying one or more files, use e.g. "alias foo $1" or
"alias foo $*", if you want your command to be asynchronous add
at end "&", e.g. "alias foo $* &".

Adding Eshell aliases to your ‘eshell-aliases-file’ or using the
‘alias’ command from Eshell allows you to create personalized
commands not available in ‘helm-find-files’ actions and use them
from ‘M-!’.

Example: You want a command to uncompress some "*.tar.gz" files from ‘helm-find-files’:

1) Create an Eshell alias named, say, "untargz" with the command
"alias untargz tar zxvf $*".

2) Now from ‘helm-find-files’ select the "*.tar.gz" file (you can also
mark files if needed) and hit ‘M-!’.

Note: When using marked files with this, the meaning of the prefix argument is
quite subtle.  Say you have "foo", "bar" and "baz" marked; when you run
the alias command ‘example’ on these files with no prefix argument it will run
‘example’ sequentially on each file:

$ example foo
$ example bar
$ example baz

With a prefix argument however it will apply ‘example’ on all files at once:

$ example foo bar baz

Of course the alias command should support this.

If you add %s to the command line %s will be replaced with the candidate, this mean you can
add extra argument to your command e.g. command -extra-arg %s or command %s -extra-arg.
If you want to pass many files inside %s, don’t forget to use a prefix arg.

You can also use special placeholders in extra-args,
see the specific info page once you hit ‘M-!’.

*** Using TRAMP with ‘helm-find-files’ to read remote directories

‘helm-find-files’ works fine with TRAMP despite some limitations.

- Grepping files is not very well supported when used incrementally.
See [[Grepping on remote files]].

- Locate does not work on remote directories.

**** A TRAMP syntax crash course

Please refer to TRAMP’s documentation for more details.

- Connect to host 192.168.0.4 as user "foo":

/scp:192.168.0.4@foo:

- Connect to host 192.168.0.4 as user "foo" on port 2222:

/scp:192.168.0.4@foo#2222:

- Connect to host 192.168.0.4 as root using multihops syntax:

/ssh:192.168.0.4@foo|sudo:192.168.0.4:

Note: You can also use ‘tramp-default-proxies-alist’ when connecting often to
the same hosts.

As a rule of thumb, prefer the scp method unless using multihops (which only
works with the ssh method), especially when copying large files.

You need to hit ‘C-j’ once on top of a directory on the first connection
to complete the pattern in the minibuffer.

**** Display color for directories, symlinks etc... with tramp

Starting at helm version 2.9.7 it is somewhat possible to
colorize fnames by listing files without loosing performances with
external commands (ls and awk) if your system is compatible.
For this you can use ‘helm-list-dir-external’ as value
for ‘helm-list-directory-function’.

See ‘helm-list-directory-function’ documentation for more infos.

**** Completing host

As soon as you enter the first ":" after method e.g =/scp:= you will
have some completion about previously used hosts or from your =~/.ssh/config=
file, hitting ‘C-j’ or ‘right’ on a candidate will insert this host in minibuffer
without addind the ending ":", second hit insert the last ":".
As soon the last ":" is entered TRAMP will kick in and you should see the list
of candidates soon after.

When connection fails, be sure to delete your TRAMP connection with M-x
‘helm-delete-tramp-connection’ before retrying.

**** Editing local files as root

Use the sudo method:

"/sudo:host:" or simply "/sudo::".

*** Attach files to a mail buffer (message-mode)

If you are in a ‘message-mode’ or ‘mail-mode’ buffer, that action will appear
in action menu, otherwise it is available at any time with C-c C-a.
It behaves as follows:

- If you are in a (mail or message) buffer, files are attached there.

- If you are not in a mail buffer but one or more mail buffers exist, you are
prompted to attach files to one of these mail buffers.

- If you are not in a mail buffer and no mail buffer exists,
a new mail buffer is created with the attached files in it.

*** Open files in separate windows

When [[Marked candidates][marking]] multiple files or using [[Use the wildcard to select multiple files][wildcard]], helm allow opening all
this files in separate windows using an horizontal layout or a
vertical layout if you used a prefix arg, when no more windows can be
displayed in frame, next files are opened in background without being
displayed.  When using C-c o the current
buffer is kept and files are displayed next to it with same behavior as above.
When using two prefix args, files are opened in background without beeing displayed.

*** Expand archives as directories in a avfs directory

If you have mounted your filesystem with mountavfs,
you can expand archives in the "~/.avfs" directory with C-j.

*** Tramp archive support (emacs-27+ only)

If your emacs have library tramp-archive.el, you can browse the
content of archives with emacs and BTW helm-find-files. However this beeing
experimental and not very fast, helm doesn’t provide an automatic
expansion and detection of archives, you will have to add the final /
manually and may have to force update (C-c C-u)
or remove and add again the final / until tramp finish decompressing archive.

*** Touch files

In the completion buffer, you can choose the default which is the current-time, it is
the first candidate or the timestamp of one of the selected files.
If you need to use something else, use M-n and edit
the date in minibuffer.
It is also a way to quickly create a new file without opening a buffer, saving it
and killing it.
To touch more than one new file, separate you filenames with a comma (",").
If one wants to create (touch) a new file with comma inside the name use a prefix arg,
this will prevent splitting the name and create multiple files.

*** Delete files

You can delete files without quitting helm with
‘C-c d’ or delete files and quit helm with ‘M-D’.

In the second method you can choose to
make this command asynchronous by customizing
‘helm-ff-delete-files-function’.

_WARNING_: When deleting files asynchronously you will NOT be
WARNED if directories are not empty, that’s mean non empty directories will
be deleted in background without asking.

A good compromise is to trash your files
when using asynchronous method (see [[Trashing files][Trashing files]]).

When choosing synchronous delete, you can allow recursive
deletion of directories with ‘helm-ff-allow-recursive-deletes’.
Note that when trashing (synchronous) you are not asked for recursive deletion.

Note that ‘helm-ff-allow-recursive-deletes’ have no effect when
deleting asynchronously.

First method (persistent delete) is always synchronous.

Note that when a prefix arg is given, trashing behavior is inversed.
See [[Trashing files][Trashing files]].

**** Trashing files

If you want to trash your files instead of deleting them you can
set ‘delete-by-moving-to-trash’ to non nil, like this your files
will be moved to trash instead of beeing deleted.

You can reverse at any time the behavior of ‘delete-by-moving-to-trash’ by using
a prefix arg with any of the delete files command.

On GNULinux distributions, when navigating to a Trash directory you
can restore any file in ..Trash/files directory with the ’Restore
from trash’ action you will find in action menu (needs the
trash-cli package installed for remote files, see [[Trashing remote files with tramp][Here]]).
You can as well delete files from Trash directories with the ’delete files from trash’
action.
If you want to know where a file will be restored, hit ‘M-i’, you will find a trash info.

Tip: Navigate to your Trash/files directories with ‘helm-find-files’ and set a bookmark
there with C-x r m for fast access to Trash.

NOTE: Restoring files from trash is working only on system using
the [[http://freedesktop.org/wiki/Specifications/trash-spec][freedesktop trash specifications]].

_WARNING:_

If you have an ENV var XDG_DATA_HOME in your .profile or .bash_profile
and this var is set to something like $HOME/.local/share (like preconized)
‘move-file-to-trash’ may try to create $HOME/.local/share/Trash (literally)
and its subdirs in the directory where you are actually trying to trash files.
because ‘move-file-to-trash’ is interpreting XDG_DATA_HOME literally instead
of evaling its value (with ‘substitute-in-file-name’).

***** Trashing remote files with tramp

Trashing remote files (or local files with sudo method) is disabled by default
because tramp is requiring the ’trash’ command to be installed, if you want to
trash your remote files, customize ‘helm-trash-remote-files’.
The package on most GNU/Linux based distributions is trash-cli, it is available [[https://github.com/andreafrancia/trash-cli][here]].

NOTE:
When deleting your files with sudo method, your trashed files will not be listed
with trash-list until you log in as root.

*** Checksum file

Checksum is calculated with the md5sum, sha1sum, sha224sum,
sha256sum, sha384sum and sha512sum when available, otherwise the
Emacs function ‘secure-hash’ is used but it is slow and may crash
Emacs and even the whole system as it eats all memory.  So if
your system doesn’t have the md5 and sha command line tools be
careful when checking sum of larges files e.g. isos.

*** Ignored or boring files

Helm-find-files can ignore files matching
‘helm-boring-file-regexp-list’ or files that are git ignored, you
can set this with ‘helm-ff-skip-boring-files’ or
‘helm-ff-skip-git-ignored-files’.
NOTE: This will slow down helm, be warned.

*** Helm-find-files is using a cache

Helm is caching each directory files list in a hash table for
faster search, when a directory is modified it is removed from cache
so that further visit in this directory refresh cache.
You may have in some rare cases to refresh directory manually with ‘C-c C-u’
for example when helm-find-files session is running and a file is modified/deleted
in current visited directory by an external command from outside Emacs.

** Commands

| Keys    | Description                                                                                 |
|---------+---------------------------------------------------------------------------------------------|
| C-x C-f | Run ‘locate’ (‘C-u’ to specify locate database, ‘M-n’ to insert basename of candidate).     |
| C-x C-d | Browse project (‘C-u’ to recurse, ‘C-u C-u’ to recurse and refresh database).               |
| C-c /   | Run ‘find’ shell command from this directory.                                               |
| C-s     | Run Grep (‘C-u’ to recurse).                                                                |
| M-g p   | Run Pdfgrep on marked files.                                                                |
| M-g z   | Run zgrep (‘C-u’ to recurse).                                                               |
| M-g a   | Run AG grep on current directory.                                                           |
| M-g g   | Run git-grep on current directory.                                                          |
| M-g i   | Run gid (id-utils).                                                                         |
| M-.     | Run Etags (‘C-u’ to use thing-at-point, ‘C-u C-u’ to reload cache).                         |
| M-R     | Rename Files (‘C-u’ to follow).                                                             |
| M-@     | Query replace on marked files.                                                              |
| M-C     | Copy Files (‘C-u’ to follow).                                                               |
| M-V     | Rsync Files (‘C-u’ to edit command).                                                        |
| M-B     | Byte Compile Files (‘C-u’ to load).                                                         |
| M-L     | Load Files.                                                                                 |
| M-S     | Symlink Files.                                                                              |
| M-H     | Hardlink files.                                                                             |
| M-Y     | Relative symlink Files.                                                                     |
| M-D     | Delete Files.                                                                               |
| M-T     | Touch files.                                                                                |
| M-K     | Kill buffer candidate without leaving Helm.                                                 |
| C-c d   | Delete file without leaving Helm.                                                           |
| M-e     | Switch to prefered shell.                                                                   |
| M-!     | Eshell command on file (‘C-u’ to apply on marked files, otherwise treat them sequentially). |
| C-c =   | Ediff file.                                                                                 |
| M-=     | Ediff merge file.                                                                           |
| C-c i   | Complete file name at point.                                                                |
| C-c o   | Switch to other window.                                                                     |
| C-c C-o | Switch to other frame.                                                                      |
| C-c C-x | Open file with external program (‘C-u’ to choose).                                          |
| C-c C-v | Preview file with external program.                                                         |
| C-c X   | Open file externally with default tool.                                                     |
| M-l     | Rotate image left.                                                                          |
| M-r     | Rotate image right.                                                                         |
| M-+     | Zoom in image.                                                                              |
| M--     | Zoom out image.                                                                             |
| C-l     | Go to parent directory.                                                                     |
| M-p     | Switch to the visited-directory history.                                                    |
| C-c h   | Switch to file name history.                                                                |
| M-i     | Show file properties in a tooltip.                                                          |
| M-a     | Mark all visible candidates.                                                                |
| C-c DEL | Toggle auto-expansion of directories.                                                       |
| M-U     | Unmark all candidates, visible and invisible ones.                                          |
| C-c C-a | Attach files to message buffer.                                                             |
| C-c p   | Print file, (‘C-u’ to refresh printer list).                                                |
| C-{     | Enlarge Helm window.                                                                        |
| C-}     | Narrow Helm window.                                                                         |
| C-]     | Toggle basename/fullpath.                                                                   |
| C-c r   | Find file as root.                                                                          |
| C-x C-v | Find alternate file.                                                                        |
| C-c @   | Insert org link.                                                                            |
| C-x r m | Set bookmark to current directory.                                                          |
| C-x r b | Jump to bookmark list.                                                                      |
| <S-f1>  | Sort alphabetically                                                                         |
| <S-f2>  | Sort by newest                                                                              |
| <S-f3>  | Sort by size                                                                                |
| <S-f4>  | Show only directories                                                                       |
| <S-f5>  | Show only files                                                                             |

* Helm Generic Help
** Basics

To navigate in this Help buffer see [[Helm help][here]].

Helm narrows down the list of candidates as you type a filter
pattern.  See [[Matching in Helm][Matching in Helm]].

Helm accepts multiple space-separated patterns, each pattern can
be negated with "!".

Helm also supports fuzzy matching in some places when specified,
you will find several variables to enable fuzzy matching in
diverse [[Helm sources][sources]], see [[https://github.com/emacs-helm/helm/wiki/Fuzzy-matching][fuzzy-matching]] in helm-wiki for more infos.

Helm generally uses familiar Emacs keys to navigate the list.
Here follow some of the less obvious bindings:

- ‘RET’ selects the
candidate from the list, executes the default action upon exiting
the Helm session.

- ‘C-j’ executes the
default action but without exiting the Helm session.  Not all
sources support this.

- ‘TAB’ displays a list of actions
available on current candidate or all marked candidates.  The
default binding <tab> is ordinarily used for completion, but that
would be redundant since Helm completes upon every character
entered in the prompt.  See [[https://github.com/emacs-helm/helm/wiki#helm-completion-vs-emacs-completion][Helm wiki]].

Note: In addition to the default actions list, additional actions
appear depending on the type of the selected candidate(s).  They
are called filtered actions.

** Helm sources

Helm uses what’s called sources to provide different kinds of
completions.  Each Helm session can handle one or more source.  A
source is an alist object which is build from various classes,
see [[Writing your own Helm sources][here]] and
[[https://github.com/emacs-helm/helm/wiki/Developing#creating-a-source][Helm
wiki]] for more infos.

*** Configure sources

You will find in Helm sources already built and bound to a
variable called generally ‘helm-source-<something>’.  In this case
it is an alist and you can change the attributes (keys) values
using ‘helm-set-attr’ function in your configuration.  Of course
you have to ensure before calling ‘helm-set-attr’ that the file
containing source is loaded, e.g. with ‘with-eval-after-load’.  Of
course you can also completely redefine the source but this is
generally not elegant as it duplicate for its most part code
already defined in Helm.

You will find also sources that are not built and even not bound
to any variables because they are rebuilded at each start of a
Helm session.  In this case you can add a defmethod called
‘helm-setup-user-source’ to your config:

#+begin_src elisp

    (cl-defmethod helm-setup-user-source ((source helm-moccur-class))
      (setf (slot-value source ’follow) -1))

#+end_src

See
[[https://github.com/emacs-helm/helm/wiki/FAQ#why-is-a-customizable-helm-source-nil][here]]
for more infos, and for more complex examples of configuration
[[https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/init-helm.el#L340][here]].

** Modify keybindings in Helm

Helm main keymap is ‘helm-map’, all keys bound in this map apply
to all Helm sources.  However, most sources have their own keymap,
with each binding overriding its counterpart in ‘helm-map’, you
can see all bindings in effect in the [[Commands][Commands]]
section (available only if the source has its own keymap and
documentation of course).

** Matching in Helm

All that you write in minibuffer is interpreted as a regexp or
multiple regexps if separated by a space.  This is true for most
sources unless the developer of the source has disabled it or
have choosen to use fuzzy matching.  Even if a source has fuzzy
matching enabled, Helm will switch to multi match as soon as it
detects a space in the pattern.  It may also switch to multi match
as well if pattern starts with a "^" beginning of line sign.  In
those cases each pattern separated with space should be a regexp
and not a fuzzy pattern.  When using multi match patterns, each
pattern starting with "!" is interpreted as a negation i.e.
match everything but this.

*** Completion-styles

Helm generally fetches its candidates with the :candidates
function up to ‘helm-candidate-number-limit’ and then applies
match functions to these candidates according to ‘helm-pattern’.
But Helm allows matching candidates directly from the :candidates
function using its own ‘completion-styles’.
Helm provides ’helm completion style but also ’helm-flex
completion style for Emacs<27 that don’t have ’flex completion
style, otherwise (emacs-27) ’flex completion style is used to
provide fuzzy aka flex completion.
By default, like in Emacs vanilla, all completion commands (e.g.,
‘completion-at-point’) using ‘completion-in-region’ or
‘completing-read’ use ‘completion-styles’.
Some Helm native commands like ‘helm-M-x’ do use
‘completion-styles’.  Any Helm sources can use ‘completion-styles’
by using :match-dynamic slot and building their :candidates
function with ‘helm-dynamic-completion’.

Example:

#+begin_src elisp

    (helm :sources (helm-build-sync-source "test"
                     :candidates (helm-dynamic-completion
                                  ’(foo bar baz foab)
                                  ’symbolp)
                     :match-dynamic t)
          :buffer "*helm test*")

#+end_src

By default Helm sets up ‘completion-styles’ and always adds ’helm
to it.  However the flex completion styles are not added.  This is
up to the user if she wants to have such completion to enable
this.
As specified above use ’flex for emacs-27 and ’helm-flex for
emacs-26. Anyway, ’helm-flex is not provided in
‘completion-styles-alist’ if ’flex is present.

Finally Helm provides two user variables to control
‘completion-styles’ usage: ‘helm-completion-style’ and
‘helm-completion-syles-alist’.  Both variables are customizable.
The former allows retrieving previous Helm behavior if needed, by
setting it to ‘helm’ or ‘helm-fuzzy’, default being ‘emacs’ which
allows dynamic completion and usage of ‘completion-styles’.  The
second allows setting ‘helm-completion-style’ per mode and also
specifying ‘completion-styles’ per mode (see its docstring).  Note
that these two variables take effect only in helm-mode i.e. in
all that uses ‘completion-read’ or ‘completion-in-region’, IOW all
helmized commands.  File completion in ‘read-file-name’ family
doesn’t obey completion-styles and has its own file completion
implementation. Native Helm commands using ‘completion-styles’
doesn’t obey ‘helm-completion-style’ and
‘helm-completion-syles-alist’ (e.g., helm-M-x).

Also for a better control of styles in native Helm sources (not
helmized by helm-mode) using :match-dynamic,
‘helm-dynamic-completion’ provides a STYLES argument that allows
specifying explicitely styles for this source.

NOTE: Some old completion styles are not working fine with Helm
and are disabled by default in
‘helm-blacklist-completion-styles’.  They are anyway not useful in
Helm because ’helm style supersedes these styles.

** Helm mode

‘helm-mode’ toggles Helm completion in native Emacs functions, so
when you turn ‘helm-mode’ on, commands like ‘switch-to-buffer’
will use Helm completion instead of the usual Emacs completion
buffer.

*** What gets or does not get "helmized" when ‘helm-mode’ is enabled?

Helm provides generic completion on all Emacs functions using
‘completing-read’, ‘completion-in-region’ and their derivatives,
e.g. ‘read-file-name’.  Helm exposes a user variable to control
which function to use for a specific Emacs command:
‘helm-completing-read-handlers-alist’.  If the function for a
specific command is nil, it turns off Helm completion.  See the
variable documentation for more infos.

*** Helm functions vs helmized Emacs functions

While there are Helm functions that perform the same completion
as other helmized Emacs functions, e.g. ‘switch-to-buffer’ and
‘helm-buffers-list’, the native Helm functions like
‘helm-buffers-list’ can receive new features that allow marking
candidates, have several actions, etc.  Whereas the helmized Emacs
functions only have Helm completion, Emacs can provide no more
than one action for this function.  This is the intended behavior.

Generally you are better off using the native Helm command than
the helmized Emacs equivalent.

*** Completion behavior with Helm and completion-at-point

Helm is NOT completing dynamically.  That means that when you are
completing some text at point, completion is done against this
text and subsequent characters you add AFTER this text.  This
allows you to use matching methods provided by Helm, that is multi
matching or fuzzy matching (see [[Matching in Helm][Matching in
Helm]]).

Completion is not done dynamically (against ‘helm-pattern’)
because backend functions (i.e. ‘competion-at-point-functions’)
are not aware of Helm matching methods.

By behaving like this, the benefit is that you can fully use Helm
matching methods but you can’t start a full completion against a
prefix different than the initial text you have at point.  Helm
warns you against this by colorizing the initial input and sends
a user-error message when trying to delete backward text beyond
this limit at first hit on DEL.  A second hit on DEL within a
short delay (1s) quits Helm and delete-backward char in
current-buffer.

** Helm help

C-x c h h: Show all Helm documentations concatenated
in one org file.

From a Helm session, just hit C-h m to have
the documentation for the current source followed by the global
Helm documentation.

While in the help buffer, most of the Emacs regular key bindings
are available; the most important ones are shown in minibuffer.
However, due to implementation restrictions, no regular Emacs
keymap is used (it runs in a loop when reading the help buffer).
Only simple bindings are available and they are defined in
‘helm-help-hkmap’, which is a simple alist of (key . function).
You can define or redefine bindings in help with
‘helm-help-define-key’ or by adding/removing entries directly in
‘helm-help-hkmap’.
See ‘helm-help-hkmap’ for restrictions on bindings and functions.

The documentation of default bindings are:

| Key       | Alternative keys | Command             |
|-----------+------------------+---------------------|
| C-v       | Space next       | Scroll up           |
| M-v       | b prior          | Scroll down         |
| C-s       |                  | Isearch forward     |
| C-r       |                  | Isearch backward    |
| C-a       |                  | Beginning of line   |
| C-e       |                  | End of line         |
| C-f       | right            | Forward char        |
| C-b       | left             | Backward char       |
| C-n       | down             | Next line           |
| C-p       | up               | Previous line       |
| M-a       |                  | Backward sentence   |
| M-e       |                  | Forward sentence    |
| M-f       |                  | Forward word        |
| M-b       |                  | Backward word       |
| M->       |                  | End of buffer       |
| M-<       |                  | Beginning of buffer |
| C-<SPACE> |                  | Toggle mark         |
| C-M-SPACE |                  | Mark sexp           |
| RET       |                  | Follow org link     |
| C-%       |                  | Push org mark       |
| C-&       |                  | Goto org mark-ring  |
| TAB       |                  | Org cycle           |
| M-<TAB>   |                  | Toggle visibility   |
| M-w       |                  | Copy region         |
| q         |                  | Quit                |

** Customize Helm

Helm provides a lot of user variables for extensive customization.
From any Helm session, type C-h c
to jump to the current source ‘custom’ group.  Helm also has a
special group for faces you can access via ‘M-x customize-group
RET helm-faces’.

Note: Some sources may not have their group set and default to
the ‘helm’ group.

** Display Helm in windows and frames

You can display the Helm completion buffer in many different
window configurations, see the custom interface to discover the
different windows configurations available (See [[Customize Helm][Customize Helm]] to jump to custom interface).
When using Emacs in a graphic display (i.e. not in a terminal) you can as
well display your Helm buffers in separated frames globally for
all Helm commands or separately for specific Helm commands.
See ‘helm-display-function’ and ‘helm-commands-using-frame’.
See also [[https://github.com/emacs-helm/helm/wiki/frame][helm wiki]] for more infos.

There is a variable to allow reusing frame instead of deleting
and creating a new one at each session, see ‘helm-display-buffer-reuse-frame’.
Normally you don’t have to use this, it have been made to workaround
slow frame popup in Emacs-26, to workaround this slowness in Emacs-26 use instead

#+begin_src elisp 
    (when (= emacs-major-version 26)
      (setq x-wait-for-event-timeout nil))
#+end_src

WARNING:
There is a package called posframe and also one called helm-posframe,
you DO NOT need these packages to display helm buffers in frames.

** Helm’s basic operations and default key bindings

| Key     | Alternative Keys | Command                                                              |
|---------+------------------+----------------------------------------------------------------------|
| C-p     | Up               | Previous line                                                        |
| C-n     | Down             | Next line                                                            |
| M-v     | prior            | Previous page                                                        |
| C-v     | next             | Next page                                                            |
| Enter   |                  | Execute first (default) action / Select [1]                          |
| M-<     |                  | First line                                                           |
| M->     |                  | Last line                                                            |
| C-M-S-v | M-prior, C-M-y   | Previous page (other-window)                                         |
| C-M-v   | M-next           | Next page (other-window)                                             |
| Tab     | C-i              | Show action list                                                     |
| M-o     | left             | Previous source                                                      |
| C-o     | right            | Next source                                                          |
| C-k     |                  | Delete pattern (with prefix arg delete from point to end or all [2]) |
| C-j     |                  | Persistent action (Execute and keep Helm session)                    |

[1] Behavior may change depending context in some source e.g. ‘helm-find-files’.

[2] Delete from point to end or all depending on the value of
‘helm-delete-minibuffer-contents-from-point’.

NOTE: Any of these bindings are from ‘helm-map’ and may be
overriten by the map specific to the current source in use (each
source can have its own keymap).

** The actions menu

You can display the action menu in the same window
as helm candidates (default) or in a side window according to
‘helm-show-action-window-other-window’ value.

When the action menu popup, the helm prompt is used to narrow
down this menu, no more candidates.

When ‘helm-allow-mouse’ is non nil, you can use as well
mouse-3 (right click) in the candidate zone to select actions
with the mouse once your candidate is selected.

** Action transformers

You may be surprized to see your actions list changing depending
on the context.  This happen when a source has an action
transformer function which checks the current selected candidate
and adds specific actions for this candidate.

** Shortcuts for n-th first actions

f1-f12: Execute n-th action where n is 1 to 12.

** Shortcuts for executing the default action on the n-th candidate

Helm does not display line numbers by default, with Emacs-26+ you
can enable it permanently in all helm buffers with:

    (add-hook ’helm-after-initialize-hook ’helm-init-relative-display-line-numbers)

You can also toggle line numbers with
C-c l in current Helm
buffer.

Of course when enabling ‘global-display-line-numbers-mode’ Helm
buffers will have line numbers as well. (Don’t forget to
customize ‘display-line-numbers-type’ to relative).

In Emacs versions < to 26 you will have to use
[[https://github.com/coldnew/linum-relative][linum-relative]]
package and ‘helm-linum-relative-mode’.

Then when line numbers are enabled with one of the methods above
the following keys are available([1]):

C-x <n>: Execute default action on the n-th candidate before
currently selected candidate.

C-c <n>: Execute default action on the n-th candidate after
current selected candidate.

"n" is limited to 1-9.  For larger jumps use other navigation
keys.

[1] Note that the key bindings are always available even if line
numbers are not displayed.  They are just useless in this case.

** Mouse control in Helm

A basic support for the mouse is provided when the user sets
‘helm-allow-mouse’ to non-nil.

- mouse-1 selects the candidate.
- mouse-2 executes the default action on selected candidate.
- mouse-3 pops up the action menu.

Note: When mouse control is enabled in Helm, it also lets you
click around and lose the minibuffer focus: you’ll have to click
on the Helm buffer or the minibuffer to retrieve control of your
Helm session.

** Marked candidates

You can mark candidates to execute an action on all of them
instead of the current selected candidate only.  (See bindings
below.) Most Helm actions operate on marked candidates unless
candidate-marking is explicitely forbidden for a specific source.

- To mark/unmark a candidate, use
C-@.  (See bindings below.) With a
numeric prefix arg mark ARG candidates forward, if ARG is
negative mark ARG candidates backward.

- To mark all visible unmarked candidates at once in current
source use M-a.  With a prefix argument, mark all
candidates in all sources.

- To unmark all visible marked candidates at once use
  M-U.

- To mark/unmark all candidates at once use
M-m.  With a prefix argument, mark/unmark
all candidates in all sources.

Note: When multiple candidates are selected across different
sources, only the candidates of the current source will be used
when executing most actions (as different sources can have
different actions).  Some actions support multi-source marking
however.

** Follow candidates

When ‘helm-follow-mode’ is on (C-c C-f
to toggle it), moving up and down Helm session or updating the
list of candidates will automatically execute the
persistent-action as specified for the current source.

If ‘helm-follow-mode-persistent’ is non-nil, the state of the
mode will be restored for the following Helm sessions.

If you just want to follow candidates occasionally without
enabling ‘helm-follow-mode’, you can use
<C-down> or
<C-up> instead.  Conversely, when
‘helm-follow-mode’ is enabled, those commands go to previous/next
line without executing the persistent action.

** Frequently Used Commands

| Keys     | Description                                                                       |
|----------+-----------------------------------------------------------------------------------|
| C-t      | Toggle vertical/horizontal split on first hit and swap Helm window on second hit. |
| C-c %    | Exchange minibuffer and header-line.                                              |
| C-x C-f  | Drop into ‘helm-find-files’.                                                      |
| C-c C-k  | Kill display value of candidate and quit (with prefix arg, kill the real value).  |
| C-c C-y  | Yank current selection into pattern.                                              |
| C-c TAB  | Copy selected candidate at point in current buffer.                               |
| C-c C-f  | Toggle automatic execution of persistent action.                                  |
| <C-down> | Run persistent action then select next line.                                      |
| <C-up>   | Run persistent action then select previous line.                                  |
| C-c C-u  | Recalculate and redisplay candidates.                                             |
| C-!      | Toggle candidate updates.                                                         |

** Special yes, no or yes for all answers

You may be prompted in the minibuffer to answer by [y,n,!,q] in
some places for confirmation.

- y  mean yes
- no mean no
- !  mean yes for all
- q  mean quit or abort current operation.

When using ! you will not be prompted for the same thing in
current operation any more, e.g. file deletion, file copy etc...

** Moving in ‘helm-buffer’

You can move in ‘helm-buffer’ with the usual commands used in
Emacs: (C-n,
C-p, etc.  See above basic
commands.  When ‘helm-buffer’ contains more than one source,
change source with C-o and
M-o.

Note: When reaching the end of a source,
C-n will *not* go to the next source
when variable ‘helm-move-to-line-cycle-in-source’ is non-nil, so
you will have to use C-o and
M-o.

** Resume previous session from current Helm session

You can use ‘C-c n’ (‘helm-run-cycle-resume’) to cycle in
resumables sources.  ‘C-c n’ is a special key set with
‘helm-define-key-with-subkeys’ which, after pressing it, allows
you to keep cycling with further ‘n’.

Tip: You can bound the same key in ‘global-map’ to
     ‘helm-cycle-resume’ with ‘helm-define-key-with-subkeys’ to
     let you transparently cycle sessions, Helm fired up or not.
     You can also bind the cycling commands to single key
     presses (e.g., ‘S-<f1>’) this time with a simple
     ‘define-key’.  (Note that ‘S-<f1>’ is not available in
     terminals.)

Note: ‘helm-define-key-with-subkeys’ is available only once Helm
is loaded.

You can also use
C-x b to resume
the previous session, or
C-x C-b to have
completion on all resumable buffers.

** Global commands

*** Resume Helm session from outside Helm

C-x c b revives the last Helm session.
Binding a key to this command will greatly improve Helm
interactivity, e.g. when quitting Helm accidentally.

You can call C-x c b with a prefix argument
to choose (with completion!) which session you’d like to resume.
You can also cycle in these sources with ‘helm-cycle-resume’ (see
above).

** Debugging Helm

Helm exposes the special variable ‘helm-debug’: setting it to
non-nil will enable Helm logging in a special outline-mode
buffer.  Helm resets the variable to nil at the end of each
session.

For convenience, C-h C-d
allows you to turn on debugging for this session only.  To avoid
accumulating log entries while you are typing patterns, you can
use C-! to turn off
updating.  When you are ready turn it on again to resume logging.

Once you exit your Helm session you can access the debug buffer
with ‘helm-debug-open-last-log’.  It is possible to save logs to
dated files when ‘helm-debug-root-directory’ is set to a valid
directory.

Note: Be aware that Helm log buffers grow really fast, so use
‘helm-debug’ only when needed.

** Writing your own Helm sources

Writing simple sources for your own usage is easy.  When calling
the ‘helm’ function, the sources are added the :sources slot
which can be a symbol or a list of sources.  Sources can be built
with different EIEIO classes depending on what you want to do.  To
simplify this, several ‘helm-build-*’ macros are provided.  Below
there are simple examples to start with.

We will not go further here, see
[[https://github.com/emacs-helm/helm/wiki/Developing][Helm wiki]]
and the source code for more information and more complex
examples.

#+begin_src elisp

    ;; Candidates are stored in a list.
    (helm :sources (helm-build-sync-source "test"
                     ;; A function can be used as well
                     ;; to provide candidates.
                     :candidates ’("foo" "bar" "baz"))
          :buffer "*helm test*")

    ;; Candidates are stored in a buffer.
    ;; Generally faster but doesn’t allow a dynamic updating
    ;; of the candidates list i.e the list is fixed on start.
    (helm :sources (helm-build-in-buffer-source "test"
                     :data ’("foo" "bar" "baz"))
          :buffer "*helm test*")

#+end_src

** Helm Map
key             binding
---             -------

C-@             helm-toggle-visible-mark
C-c             Prefix Command
C-g             helm-keyboard-quit
C-h             Prefix Command
TAB             helm-select-action
C-j             helm-execute-persistent-action
C-k             helm-delete-minibuffer-contents
C-l             helm-recenter-top-bottom-other-window
RET             helm-maybe-exit-minibuffer
C-n             helm-next-line
C-o             helm-next-source
C-p             helm-previous-line
C-t             helm-toggle-resplit-and-swap-windows
C-v             helm-next-page
C-w             ??
C-x             Prefix Command
ESC             Prefix Command
C-SPC           helm-toggle-visible-mark-forward
C-!             helm-toggle-suspend-update
C-{             helm-enlarge-window
C-}             helm-narrow-window
<C-M-down>      helm-scroll-other-window
<C-M-up>        helm-scroll-other-window-down
<C-down>        helm-follow-action-forward
<C-up>          helm-follow-action-backward
<M-next>        helm-scroll-other-window
<M-prior>       helm-scroll-other-window-down
<XF86Back>      previous-history-element
<XF86Forward>   next-history-element
<down>          helm-next-line
<f1>            ??
<f2>            ??
<f3>            ??
<f4>            ??
<f5>            ??
<f6>            ??
<f7>            ??
<f8>            ??
<f9>            ??
<f10>           ??
<f11>           ??
<f12>           ??
<f13>           ??
<help>          Prefix Command
<insert-state>  Prefix Command
<left>          helm-previous-source
<next>          helm-next-page
<normal-state>  Prefix Command
<prior>         helm-previous-page
<right>         helm-next-source
<up>            helm-previous-line
<(insert normal)-state>         Prefix Command

<normal-state> C-b              helm-previous-page
<normal-state> C-d              helm-next-page
<normal-state> C-f              helm-next-page
<normal-state> RET              helm-maybe-exit-minibuffer
<normal-state> C-n              helm-next-line
<normal-state> C-o              helm-next-source
<normal-state> C-p              helm-previous-line
<normal-state> C-v              helm-next-page
<normal-state> ESC              Prefix Command
<normal-state> SPC              helm-toggle-visible-mark
<normal-state> (                helm-prev-visible-mark
<normal-state> )                helm-next-visible-mark
<normal-state> /                helm-quit-and-find-file
<normal-state> G                helm-end-of-buffer
<normal-state> [                Prefix Command
<normal-state> ]                Prefix Command
<normal-state> g                Prefix Command
<normal-state> j                helm-next-line
<normal-state> k                helm-previous-line
<normal-state> y                Prefix Command
<normal-state> <tab>            helm-select-action

<insert-state> C-b              helm-previous-page
<insert-state> C-f              helm-next-page
<insert-state> RET              helm-maybe-exit-minibuffer
<insert-state> C-n              helm-next-line
<insert-state> C-o              helm-next-source
<insert-state> C-p              helm-previous-line
<insert-state> C-v              helm-next-page
<insert-state> ESC              Prefix Command

<help> m        helm-help

C-h C-d         helm-enable-or-switch-to-debug
C-h c           helm-customize-group
C-h m           helm-help

C-c C-f         helm-follow-mode
C-c TAB         helm-copy-to-buffer
C-c C-k         helm-kill-selection-and-quit
C-c C-u         helm-refresh
C-c C-y         helm-yank-selection
C-c %           helm-exchange-minibuffer-and-header-line
C-c -           helm-swap-windows
C-c 1           helm-execute-selection-action-at-nth-+1
C-c 2           helm-execute-selection-action-at-nth-+2
C-c 3           helm-execute-selection-action-at-nth-+3
C-c 4           helm-execute-selection-action-at-nth-+4
C-c 5           helm-execute-selection-action-at-nth-+5
C-c 6           helm-execute-selection-action-at-nth-+6
C-c 7           helm-execute-selection-action-at-nth-+7
C-c 8           helm-execute-selection-action-at-nth-+8
C-c 9           helm-execute-selection-action-at-nth-+9
C-c >           helm-toggle-truncate-line
C-c ?           helm-help
C-c _           helm-toggle-full-frame
C-c l           helm-display-line-numbers-mode
C-c n           ??

C-x C-b         helm-resume-list-buffers-after-quit
C-x C-f         helm-quit-and-find-file
C-x 1           helm-execute-selection-action-at-nth-+1
C-x 2           helm-execute-selection-action-at-nth-+2
C-x 3           helm-execute-selection-action-at-nth-+3
C-x 4           helm-execute-selection-action-at-nth-+4
C-x 5           helm-execute-selection-action-at-nth-+5
C-x 6           helm-execute-selection-action-at-nth-+6
C-x 7           helm-execute-selection-action-at-nth-+7
C-x 8           helm-execute-selection-action-at-nth-+8
C-x 9           helm-execute-selection-action-at-nth-+9
C-x b           helm-resume-previous-session-after-quit

C-M-a           helm-show-all-candidates-in-source
C-M-e           helm-display-all-sources
C-M-l           helm-reposition-window-other-window
C-M-v           helm-scroll-other-window
C-M-y           helm-scroll-other-window-down
M-SPC           helm-toggle-visible-mark-backward
M-(             helm-prev-visible-mark
M-)             helm-next-visible-mark
M-<             helm-beginning-of-buffer
M->             helm-end-of-buffer
M-U             helm-unmark-all
M-a             helm-mark-all
M-m             helm-toggle-all-marks
M-n             next-history-element
M-o             helm-previous-source
M-p             previous-history-element
M-v             helm-previous-page
C-M-S-v         helm-scroll-other-window-down

M-<             minibuffer-beginning-of-buffer
  (that binding is currently shadowed by another mode)
M-p             helm-minibuffer-history
  (that binding is currently shadowed by another mode)
M-r             previous-matching-history-element
M-s             next-matching-history-element
  (that binding is currently shadowed by another mode)

<normal-state> y P              helm-copy-to-buffer
<normal-state> y p              helm-yank-selection
<normal-state> y y              helm-kill-selection-and-quit

<normal-state> g g              helm-beginning-of-buffer
<normal-state> g j              helm-next-source
<normal-state> g k              helm-previous-source
<normal-state> g r              helm-refresh

<normal-state> ] ]              helm-next-source

<normal-state> [ [              helm-previous-source

<normal-state> M-[              helm-previous-source
<normal-state> M-]              helm-next-source
<normal-state> M-j              helm-next-line
<normal-state> M-k              helm-previous-line
<normal-state> M-l              helm-execute-persistent-action
<normal-state> M-v              helm-previous-page

<insert-state> M-[              helm-previous-source
<insert-state> M-]              helm-next-source
<insert-state> M-j              helm-next-line
<insert-state> M-k              helm-previous-line
<insert-state> M-l              helm-execute-persistent-action
<insert-state> M-v              helm-previous-page

