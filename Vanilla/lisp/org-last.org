


;; (p! org-roam-bibtex
;;   :straight t
;;   :after org-roam
;;   :hook
;;   (org-roam-mode . org-roam-bibtex-mode)

;;   :config
;;   (require 'org-ref))

;; (use-package org-roam-server
;;   :after org
;;   :bind
;;   (:map space-prefix
;;         ("r s" . org-roam-server-mode)
;;         ("r S" . org-roam-server-set-tags))
;;   :config
;;   (setq org-roam-server-host "127.0.0.1"
;;         org-roam-server-port 8080
;;         org-roam-server-serve-files t
;;         org-roam-server-authenticate nil
;;         org-roam-server-export-inline-images t
;;         org-roam-server-serve-files t
;;         org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
;;         org-roam-server-network-poll t
;;         org-roam-server-network-arrows "middle"
;;         org-roam-server-network-label-truncate t
;;         org-roam-server-network-label-truncate-length 60
;;         org-roam-server-network-label-wrap-length 20))
(p! org-ref
  :straight t
  :after (org)
  :custom
  (reftex-default-bibliography '("~/Documents/Org/references.bib"))
  (org-ref-default-bibliography '("~/Documents/Org/references.bib"))
  (bibtex-completion-bibliography '("~/Documents/Org/references.bib"))
  (org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  )
(p! org-fc
  :straight (org-fc
   :type git :repo "https://git.sr.ht/~l3kn/org-fc"
   :files (:defaults "awk" "demo.org"))
  :after org
  :config
  (require 'org-fc-hydra)
  (require 'org-fc-awk)
  :bind
        ("C-c o f r" . org-fc-review)
        ("C-c o f f" . org-fc-hydra/org-fc-update)
  :custom
  (org-fc-directories '("~/Documents/Org/Roam" "~/Documents/Org/Brain")))

;; ;; (use-package org-edna
;; ;;   :straight t
;; ;;   :after org
;; ;;   :config

;; ;;   (defun org-edna-finder/next-sibling-children ()
;; ;;     (save-excursion
;; ;;       (let* ((poiint (point)))
;; ;; 	(setq point (car (org-edna-finder/next-sibling-wrap 1)))
;; ;; 	(goto-char point)
;; ;; 	(org-edna-finder/children)
;; ;; 	)))
;; ;;   (org-edna-mode +1)
;; ;;   )
;; ;; (use-package calfw
;; ;;   :straight t)

;; ;; (use-package calfw-org
;; ;;   :straight t
;; ;;   :after calfw
;; ;;   :bind
;; ;;   (:map space-prefix
;; ;;         ("o C" . cfw:open-org-calendar)
;; ;;         )
;; ;;   )

(p! org-bullets
  :straight t
  :after org
  :hook
  (org-mode . org-bullets-mode))

(p! org-download
  :straight t
  :after org
  :config
  (add-hook 'dired-mode-hook 'org-download-enable))


(p! org-super-agenda
  :straight t
  :after org
  :custom
  (org-super-agenda-groups
   '((:name "Diary"
            :category "Diary"
            :order 1)
     (:name "Habit"
            :habit t
            :order 8)
     (:name "Remember"
            :priority "C"
            :tag "remember"
            :order 5)
     (:name "Unimportant"
            :priority "C"
            :tag "unimportant"
            :order 7)
     (:name "Deadlines"
            :deadline t
            :order 2)
     (:name "Started"
            :todo "STARTED"
            :order 4)
     (:name "Important"
            :priority "A"
            :tag ("important" "bills")
            :order 3)
     (:name "Personal"
            :tag ("movies" "tvshows" "tvseries" "books")
            :order 10)
     (:name "Overdue"
            :deadline past
            :scheduled past
            :order 6)))
  :config
  (require 'org-ql)
  (require 'org-ql-search)
  (org-super-agenda-mode +1)
  (setq org-super-agenda-header-map nil)
  )

;; (use-package org-google-tasks
;;   :straight request
;;   :straight (org-google-tasks :fetcher github :repo "https://github.com/SidharthArya/org-google-tasks")
;;   :custom
;;   (org-google-tasks-credential-file "/home/arya/Documents/Org/Bots/Org/google-tasks")
;;   (org-google-tasks-use-inheritance t)
;;   :config
;;   (org-google-tasks-load-credentials)
;;   (org-google-tasks-get-tokens)
;;   (org-google-tasks-get-remote-list t t)
;;   )

;; (p! ox-hugo
;;   :straight t
;;   :after org
;;   :defer nil
;;   :custom
;;   (org-hugo-auto-set-lastmod t)
;;   :config
;;   (setq org-hugo-base-dir "~/.blog/")
;;   (setq org-hugo-front-matter-format 'yaml)
;;     (defun org-hugo-new-subtree-post-capture-template ()
;;       "Returns `org-capture' template string for new Hugo post.
;; See `org-capture-templates' for more information."
;;       (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
;;              (fname (org-hugo-slug title)))
;; 	(mapconcat #'identity
;;                    `(
;;                      ,(concat "* TODO " title)
;;                      ":PROPERTIES:"
;;                      ,(concat ":EXPORT_FILE_NAME: " fname)
;;                      ,(concat ":EXPORT_DATE: %t")
;;                      ":END:"
;;                      "%?\n")          ;Place the cursor here finally
;;                    "\n")))

;;     (add-to-list 'org-capture-templates
;; 		 '("b" "Blog"               ))
;;     (add-to-list 'org-capture-templates
;; 		 '("be"                
;;                    "Emacs"
;;                    entry
;;                    (file+olp "~/Documents/Org/Blog/blog.org" "Emacs")
;;                    (function org-hugo-new-subtree-post-capture-template)))
;;     (add-to-list 'org-capture-templates
;; 		 '("bc"                
;;                    "Coding"
;;                    entry
;;                    (file+olp "~/Documents/Org/Blog/blog.org" "Coding")
;;                    (function org-hugo-new-subtree-post-capture-template)))
;;     (add-to-list 'org-capture-templates
;; 		 '("bp"                
;;                    "Philosophy"
;;                    entry
;;                    (file+olp "~/Documents/Org/Blog/blog.org" "Philosophy")
;;                    (function org-hugo-new-subtree-post-capture-template)))
;;     (add-to-list 'org-capture-templates
;; 		 '("bl" 
;;                    "Linux"
;;                    entry
;;                    (file+olp "~/Documents/Org/Blog/blog.org" "Linux")
;;                    (function org-hugo-new-subtree-post-capture-template)))
;;     (add-to-list 'org-capture-templates
;; 		 '("ba" 
;;                    "Artificial Intelligence"
;;                    entry
;;                    (file+olp "~/Documents/Org/Blog/blog.org" "Artificial Intelligence")
;;                    (function org-hugo-new-subtree-post-capture-template)))
;;     (add-to-list 'org-capture-templates
;; 		 '("bb" 
;;                    "Blog"
;;                    entry
;;                    (file+olp "~/Documents/Org/Blog/blog.org" "Blog")
;;                    (function org-hugo-new-subtree-post-capture-template)))
;;     :init
;;     (require 'ox-hugo)
;;     )
    
  
;;   (p! citeproc-org
;;   :straight t
;;   :after (ox-hugo org-ref)
;;   :config
;;   (citeproc-org-setup)
;;   )

;; ;; (use-package ob-ipython
;; ;;   :straight t
;; ;;   :custom
;; ;;   (ob-ipython-command "~/.local/bin/jupyter")
;; ;;   )


;; ;; TODO
;; ;; (defun org-roam--org-hugo-save ()
;; ;;   ""
;; ;;   (if (org-roam-file-p)
;; ;;   (save-excursion
;; ;;   (org-hugo-export-wim-to-md))))

;; ;; (add-hook 'after-save-hook 'org-roam--org-hugo-save)
